<1>
    Что такое Реакт?
    Это библиотека JS. Для создания пользовательского интерфейса (фронтенд), сложных приложений. Сделан фейсбук в 2013.
    Зачем реакт, если есть чистый js? 
        1.Реакт делает очень быстрые приложения за счёт Virtual dom. Он хранится в памяти и затем воспроизводится 
        в существующем Real dom. 
        2.Компонентный подход. Всё на странице - компоненты.

    Начало работы.

    Nodejs.org - lts + create new react app. 
    npx create-react-app my-app
    cd my-app 

    или Yarn. 

    Запускаем консоль в папке, yarn create react-app приложение_нейм
    className = class в реакте.
    Jsx - расширение, которое позволяет вставлять html в js. JSX должен возвращать только один элемент (враппер) без родственников, только дочерние.
    <> </> - оператор, чтобы сайт не ломался при удалении тегов.
</1>

<2>
    Компоненты позволяют разбить интерфейс на части, про которые легко думать по отдельности. (типа бэм)
    Props - значения, которые мы хотим статически передать компоненту (по дефолту).
    В классовых не надо писать название параметра в скобках, хватит this.props.name
    Значение по дефолту - то значение, которое будет, если мы явно не укажем пропс.
</2>

<3>
    Props - входные данные, State - данные внутри компонента, которые зависят от него.
    Props нельзя менять, State - можно.
</3>

<4>
</4>

<5>
Не стоит забывать, что html и js - не одно и то же, поэтому js при добавлении стилей к блоку ждёт от нас пару ключ + значение.
Сделать это можно, дописав style={{color: 'yellow', backgroundColor: 'green'}}. А ещё имена свойств объектов не могут содержать тире.

Импорт новых стилей нужно прописать в файле нужного компонента и в индексе.
</5>

<6> 
Жизненный цикл React JS
В соответствии с этапом React вызывает определённые методы, и мы можем лучше контролировать с ними компоненты.
4 части - инициализация, монтаж, обнова, размонтаж.
</6>




